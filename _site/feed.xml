<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Den</title>
        <description>By. Shin YeongHyeon</description>
        <link>http://localhost:8000//</link>
        <atom:link href="http://localhost:8000//feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Fri, 01 Jan 2021 23:31:52 +0900</pubDate>
        <lastBuildDate>Fri, 01 Jan 2021 23:31:52 +0900</lastBuildDate>
        <generator>Jekyll v4.0.0</generator>
        
        <item>
            <title>[Go 도전기] 6. Array &amp; Slice</title>
            <description>&lt;h2 id=&quot;happy-new-year&quot;&gt;Happy New Year&lt;/h2&gt;

&lt;p&gt;새해에도 Go 와 함께 시작 !&lt;/p&gt;

&lt;h3 id=&quot;1-array&quot;&gt;1. Array&lt;/h3&gt;
&lt;p&gt;Go 에서 Array 는 그 크기를 제한해주어야 한다. 또한, 그 타입도 지정해야 하며,&lt;br /&gt;
 그 안에 값들을 세팅하는 것도 나로서는 좀 색달랐다.&lt;br /&gt;
 코드로 살펴보자&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;yeong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hyeon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Define&lt;/span&gt;
 
 &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;den&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;den-shin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫 번째 라인과 같이 대괄호&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; 안에 Array 의 크기를 넣어주고 대괄호 뒤에 타입을 지정해준다.&lt;br /&gt;
그리고 값들을 중괄호&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; 안에 넣어서 정의 해준다.&lt;br /&gt;
그 후에 추가하는 것들은 그 아래 라인들과 같이 진행해주고, 만약&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;names[5] = &quot;anything&quot;&lt;/code&gt; 을 해준다면 컴파일 에러가 난다.&lt;/p&gt;

&lt;p&gt;그런데, 크기 지정은 사실 실무에서 그렇게 사용하지 않는다,&lt;br /&gt;
크기가 없는 Array 는 어떻게 지정할까 ?&lt;/p&gt;

&lt;h3 id=&quot;2-slice&quot;&gt;2. Slice&lt;/h3&gt;
&lt;p&gt;크기가 없는 Array 는 Slice 라 불리며 Array 와 정의한다.&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;yeong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hyeon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Define&lt;/span&gt;
 
 &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;den&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;선언부는 거의 똑같다, 크기 지정만 빼면.&lt;br /&gt;
 그런데 추가하는 부분이 다른데, &lt;code class=&quot;highlighter-rouge&quot;&gt;append&lt;/code&gt; 라는 함수를 이용해주어야 하며,  해당 함수는
 인자로 넘긴 첫번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;Slice&lt;/code&gt; -예제에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;names&lt;/code&gt;- 를 변화시키는게 아니라, 값을 추가해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Return&lt;/code&gt; 해준다.&lt;br /&gt;
 이와 같은 형태는 개발을 하다보면 실질적으로 도움이 된다.&lt;br /&gt;
 원래 값을 변화시키지 않고, 리턴하는 것이 디버깅에도 조금 더 효율적이니까,&lt;/p&gt;
</description>
            <pubDate>Fri, 01 Jan 2021 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//go/2021/01/01/go-array-and-slice.html</link>
            <guid isPermaLink="true">http://localhost:8000//go/2021/01/01/go-array-and-slice.html</guid>
            
            
            <category>go</category>
            
        </item>
        
        <item>
            <title>[Go 도전기] 5. Defer</title>
            <description>&lt;p&gt;&lt;a href=&quot;https://shinyeonghyeon.github.io/go/2020/12/28/go-functions.html&quot;&gt;전전 포스팅&lt;/a&gt; 에서 &lt;em&gt;끝날때 까지 끝나는게 아닌&lt;/em&gt; 함수 안의 defer 에 대해서 알아보았다.&lt;br /&gt;
defer 를 함수 최상단에 써 두었었는데, 쉬운 이해를 위해서 그랬고 중간에 넣어도&lt;br /&gt;
진행이 가능하다.&lt;br /&gt;
defer 는 해당 라인이 됐을 때 그때 스택에 쌓아 둔다.&lt;br /&gt;
이 말을 코드로 통해 이해해보자.&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 함수의 결과물은 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 이다. 실행  자체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 후라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;이 되어야 할 것 같지만, 스택에 쌓인 시점의 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;의 값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;이기 때문이다.&lt;/p&gt;

&lt;p&gt;또한, 스택이기 때문에 후입선출이 된다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;counting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드의 결과물은&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;counting
done
9
8
7
6
5
4
3
2
1
0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 된다.&lt;/p&gt;
</description>
            <pubDate>Thu, 31 Dec 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//go/2020/12/31/go-defer.html</link>
            <guid isPermaLink="true">http://localhost:8000//go/2020/12/31/go-defer.html</guid>
            
            
            <category>go</category>
            
        </item>
        
        <item>
            <title>[Go 도전기] 4. For, If, Switch Statement</title>
            <description>&lt;h2 id=&quot;for&quot;&gt;For&lt;/h2&gt;
&lt;p&gt;Go 에서는 다른 언어에서의 forEach, for in 같은 것은 존재 하지 않고 오직 for 만이 있다.
그리고 range 와 보통 사용하는데, go 만의 특색있는 for 문을 살펴보도록 하자&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// with range&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// execute&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// ignore index&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// execute&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// normal for&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// execute&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;생략&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;if--switch&quot;&gt;If / Switch&lt;/h2&gt;
&lt;p&gt;너무 익숙한 If / Switch 문, 그런데 Go 에서는 If / Switch 문 안에서만 사용할 수 있는 변수를 만들어 낼 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canIDrink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canIDrinkInKorea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koreanAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koreanAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canIDrinkSwitchVer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canIDrinkSwitchVer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canIDrinkInKoreaSwitchVer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koreanAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;koreanAge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
            <pubDate>Tue, 29 Dec 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//go/2020/12/29/go-statements.html</link>
            <guid isPermaLink="true">http://localhost:8000//go/2020/12/29/go-statements.html</guid>
            
            
            <category>go</category>
            
        </item>
        
        <item>
            <title>[Go 도전기] 3. Functions</title>
            <description>&lt;h2 id=&quot;function&quot;&gt;Function&lt;/h2&gt;
&lt;p&gt;Go 에서는 꽤 유용한 기능들이 많고 Go 만의 특이점도 많다.&lt;br /&gt;
아래에서 천천히 살펴보자.&lt;/p&gt;

&lt;h3 id=&quot;1-모든-타입-설정&quot;&gt;1. 모든 타입 설정&lt;/h3&gt;
&lt;p&gt;정적 언어이다 보니 당연하게도 파라미터 타입과 리턴 타입을 설정해 주어야 한다.
그런데 만약, &lt;code class=&quot;highlighter-rouge&quot;&gt;multiply&lt;/code&gt; 와 같은 곱셈 함수처럼 모든 파라미터가 같을 때 어느 정도 생략이 가능하다.&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiply2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-여러-값-반환&quot;&gt;2. 여러 값 반환&lt;/h3&gt;
&lt;p&gt;다른 언어에서 여러 값들을 반환 하려면 보통 Array / Object 를 이용해서 반환하며,&lt;br /&gt;
리턴 타입이 Array / Object 가 된다.&lt;br /&gt;
그러나 Go 에서는 여러 값 반환이 가능하다! (OMG ?)&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lenAndUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upperName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lenAndUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;den&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upperName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// DEN&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-args-받기&quot;&gt;3. Args 받기&lt;/h3&gt;
&lt;p&gt;갯수를 알 수 없는 파라미터들을 받을 때는 타입에 &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt;을 사용한다.&lt;br /&gt;
계속해서 코드로 알아보자&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeatPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;repeatPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;den&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;garlic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// [den shin yeong]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-리턴-타입에-변수-지정-후-아무-것도-리턴하지-않기&quot;&gt;4. 리턴 타입에 변수 지정 후 아무 것도 리턴하지 않기&lt;/h3&gt;
&lt;p&gt;제목을 어떻게 지어야 할지 애매한데, 아무것도 리턴하지 않았는데 리턴이 되는 magic 이 있다.&lt;br /&gt;
이를 naked function 이라 한다.&lt;br /&gt;
타입에 변수명을 미리 지정하기만 하면 되는데, 코드로 알아보자&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lenAndUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uppercase&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uppercase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upeprName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lenAndUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;den&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upperName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// DEN&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;신기해… &lt;del&gt;근데 사용은 안 할 듯&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-끝날때-까지-끝난게-아니다&quot;&gt;5. 끝날때 까지 끝난게 아니다&lt;/h3&gt;
&lt;p&gt;함수가 끝난 뒤에 실행이 되어야 하는 것들이 있다면 보통은 리턴 받고 나서 로직을 넣는데,
이거를 함수 내에서 설정할 수 있다, 즉 함수 자체에서 “내가 끝난 뒤에는 이것을 실행할거야!” 같은 건데,,,&lt;br /&gt;
너무 멋있다… 코드로 보자&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lenAndUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uppercase&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I'm Done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;uppercase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;totalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upperName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lenAndUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;den&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upperName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// I'm Done&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// DEN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이거 너무 멋있지 않나 ? 이거 때문이라도 go 에 빠질듯…&lt;/p&gt;

</description>
            <pubDate>Mon, 28 Dec 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//go/2020/12/28/go-functions.html</link>
            <guid isPermaLink="true">http://localhost:8000//go/2020/12/28/go-functions.html</guid>
            
            
            <category>go</category>
            
        </item>
        
        <item>
            <title>[Go 도전기] 2. Setting ~ Variables &amp; Constant ?</title>
            <description>&lt;h3 id=&quot;세팅--기본개념&quot;&gt;세팅 &amp;amp; 기본개념&lt;/h3&gt;
&lt;p&gt;Go 언어 개발시 특징이 다른 언어와 다르게 디렉토리를 맘대로 가져갈 수 없다는 것이다.&lt;br /&gt;
(Mac 기준) &lt;code class=&quot;highlighter-rouge&quot;&gt;~/go&lt;/code&gt; 폴더 안에서 진행해야 한다. (&lt;strong&gt;&lt;em&gt;GO_PATH&lt;/em&gt;&lt;/strong&gt; 라고 한다).&lt;br /&gt;
&lt;a href=&quot;https://golang.org&quot;&gt;Go 를 설치&lt;/a&gt; 하면 자동으로 생성이 된다는데 나는 안돼서 직접 만들었다.&lt;/p&gt;

&lt;p&gt;구조는 main.go 가 Entry point 이기에 필수이며 (컴파일 할 경우에 !) 메인 함수가 필수 이다.&lt;br /&gt;
또한, package 도 파일별로 필수이다. main 을 살펴보면 기본구조가 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본 제공되는 라이브러리 중 “fmt” 를 가장 먼저 접하게 되는데 (Hello World 찍어봐야지)&lt;br /&gt;
사용 방법을 보자면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;함수명을 보면 대문자로 시작하는데, 함수를 export 하려면 무조건 대문자로 시작해서 export 하고&lt;br /&gt;
사용도 대문자로 시작하여야 한다.&lt;/p&gt;

&lt;h3 id=&quot;변수--상수&quot;&gt;변수 &amp;amp; 상수&lt;/h3&gt;
&lt;p&gt;다른 언어와 똑같이 변수와 상수가 존재하는데 전 포스팅에서 장점으로 말했 듯 Type 이 필요하다.&lt;br /&gt;
예제를 보면 이해가 될 것이기에 별다른 설명은 생략한다.
또한, 변수 생성에 축약 버전도 존재하는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt; 를 사용하면 된다, 이 때에는 Type 을 명시 해주지 않는데,&lt;br /&gt;
이는 Go 가 알아서 찾아주며 이후에 다른 Type이 들어오면 에러를 뱉어내준다. (Oh..?)&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;den&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// to be ERROR !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 27 Dec 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//go/2020/12/27/go2.html</link>
            <guid isPermaLink="true">http://localhost:8000//go/2020/12/27/go2.html</guid>
            
            
            <category>go</category>
            
        </item>
        
        <item>
            <title>[Go 도전기] 1. Why Go ?</title>
            <description>&lt;p&gt;갑자기 Go 언어를 배워보고자 하는 욕구가 뿜뿜하였다.
Go 에 대해서 여러 아티클이나 영상을 접하다 보니 가장 큰 장점을 &lt;em&gt;속도가 겁나 빠르다&lt;/em&gt; 인데, 이 매력에 이끌리게 되어서,
좀 더 찾아보고 내가 배워야 할 이유가 충분하더라.&lt;/p&gt;

&lt;h3 id=&quot;1-빠르다&quot;&gt;1. 빠르다.&lt;/h3&gt;
&lt;p&gt;Go Lang 의 장점을 찾아보면 가장 먼저 Python 과 비교를 하는 아티클을 많이 보게 되는데 속도가
 너무 차이가 난다는 것이다.  믿을 수 없을 정도로 빠르다고, 유튜브를 조금만 봐도 나오는 수준…
 그리고 컴파일 언어라고 한다.&lt;/p&gt;

&lt;h3 id=&quot;2-정적-언어&quot;&gt;2. 정적 언어.&lt;/h3&gt;
&lt;p&gt;Type 강제하는가 너무 좋아&lt;/p&gt;

&lt;h3 id=&quot;3-python-과-c-를-쏙쏙&quot;&gt;3. Python 과 C 를 쏙쏙&lt;/h3&gt;
&lt;p&gt;Python 과 C 의 좋은 점들을 뽑아 디자인 되었다고 하더라, 그래서 포인터도 있고, C 처럼 자료구조를 만들기도 쉽다더라!&lt;/p&gt;

&lt;h3 id=&quot;4-동시성-지&quot;&gt;4. 동시성 지&lt;/h3&gt;

&lt;h3 id=&quot;5-갓-글&quot;&gt;5. 갓-글&lt;/h3&gt;

&lt;p&gt;물론 단점들도 있고, 익히 듣기도 했지만, 단점이 없는 게 어디 있으랴, 일단 많이 배워보자!&lt;/p&gt;

&lt;p&gt;나무위키 : &lt;a href=&quot;https://namu.wiki/w/Go(프로그래밍%20언어)&quot;&gt;https://namu.wiki/w/Go(프로그래밍%20언어)&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Sun, 27 Dec 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//go/2020/12/27/go1.html</link>
            <guid isPermaLink="true">http://localhost:8000//go/2020/12/27/go1.html</guid>
            
            
            <category>go</category>
            
        </item>
        
        <item>
            <title>(TypeScript) Indexable</title>
            <description>&lt;p&gt;TypeScript 를 사용할 때, 들어오는 인자 중 Object 가 any 인 경우들이 있는데,&lt;/p&gt;

&lt;p&gt;이것들이 interface 로 정의를 하고 싶을때가 있다.&lt;/p&gt;

&lt;p&gt;아니면 정의하는 척이라도 &lt;del&gt;any는 보기 좀 그래..&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;그럴 때 사용할 수 있는 것이 Indexable 이다.&lt;/p&gt;

&lt;p&gt;코드부터 보고 시작하자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Indexable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;결국은 any..&lt;/del&gt;
이렇다 하더라도 유용하게 쓰일 곳이 많다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Indexable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1, 2, 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 문법이 javascript 에서는 그냥 되는거 아니였나 ? 하지만, typescript 에서는 type 이 괄호 동적 접근을 하려고 하면 오류를 뱉어낸다.
그렇기 때문에 typescript 에서 동적으로 key 를 받아내려면 위와 같이 사용해야 한다.&lt;/p&gt;

</description>
            <pubDate>Tue, 08 Dec 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//typescript/2020/12/08/indexable.html</link>
            <guid isPermaLink="true">http://localhost:8000//typescript/2020/12/08/indexable.html</guid>
            
            
            <category>typescript</category>
            
        </item>
        
        <item>
            <title>(JavaScript) Optional chaining</title>
            <description>&lt;p&gt;한 Object 가 많은 Depth 를 가지고 있고, 특정한 데이터를 가져오려면 많은 Depth 를 지나서 가져온다고 가정하자.&lt;br /&gt;
그렇다면, 개발자라면 보통 해당 Depth 들이 존재하는지 체크를 보통 한다, 그러나 이게 여간 귀찮은 일이 아니다.&lt;br /&gt;
예를 들어  아래와 같은 Object 가 있다고 보자.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;depth1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depth2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;depth3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;test 의 depth1 의 depth2 의 depth3 에 접근하려면, 일단 test 있는지, 있다면 그 안에 depth1 이 있는지 …. 계속 해나가야 한다.&lt;br /&gt;
근데 이것을 한번에 아름답게 해결해줄 수 있는 것이 &lt;em&gt;Optional Chaining&lt;/em&gt; 이다.&lt;br /&gt;
있는지 확인하고 싶은 것을 dot(.) 으로 연결하기 전에 &lt;em&gt;?&lt;/em&gt; 만 붙여주면 끝.&lt;br /&gt;
거두절미하고 아래 스크린 샷을 보면 이해 될 것이다.&lt;br /&gt;
단 데이터가 없는 경우 &lt;em&gt;undefined&lt;/em&gt; 로 리턴이 오니 참고할 것!&lt;/p&gt;

&lt;p&gt;&lt;del&gt;아름다워&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/optionalchaning.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MDN : &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Fri, 27 Nov 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//javascript/2020/11/27/optional-chaining.html</link>
            <guid isPermaLink="true">http://localhost:8000//javascript/2020/11/27/optional-chaining.html</guid>
            
            
            <category>javascript</category>
            
        </item>
        
        <item>
            <title>(ReactJS) 컴포넌트 생명주기 2</title>
            <description>&lt;p&gt;이전 포스팅에서 ReactJS 의 Class Component 를 살펴보면서 가장 기초적인 부분들을 확인해 보았다.&lt;br /&gt;
이번에는 &lt;strong&gt;Updating&lt;/strong&gt;과 &lt;strong&gt;State&lt;/strong&gt; 에 대해 알아보도록 하자.&lt;/p&gt;

&lt;p&gt;ReactJS 에서는 &lt;strong&gt;State&lt;/strong&gt; 라는 것을 가지고 있는데, 이 아이는 유동적인 데이터를 사용할 때 써먹는다.&lt;br /&gt;
기본적으로&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 사용을 하는데, 이는 private 처럼 사용해야한다, 직접 조작해서는 안되는 뜻!&lt;br /&gt;
변경이 필요할 때는 마치 다른 클래스의 setter 를 사용하듯 &lt;strong&gt;setState&lt;/strong&gt; 메소드를 활용해주어야 한다.&lt;br /&gt;
그 이유는 &lt;strong&gt;Updating&lt;/strong&gt;과 관련이 있는데, state 가 변경될때마다 ReactJS는 렌더링을 다시 하는데,&lt;br /&gt;
&lt;strong&gt;setState&lt;/strong&gt; 메소드를 사용하지 않는다면 이 부분을 감지 못하므로 re-렌더링이 이뤄지지 않는다.&lt;/p&gt;

&lt;p&gt;그래서 위 설명에서 말했 듯, &lt;strong&gt;Updating&lt;/strong&gt;은 &lt;strong&gt;State&lt;/strong&gt; 혹은 &lt;strong&gt;props&lt;/strong&gt;가 변화할때 이뤄진다.&lt;br /&gt;
이때 기타 메소드들이 호출 된 후 (&lt;a href=&quot;https://ko.reactjs.org/docs/react-component.html&quot;&gt;자세한 것은 이리로&lt;/a&gt;)&lt;br /&gt;
&lt;strong&gt;render()&lt;/strong&gt; 과 호출되고 &lt;strong&gt;componentDidUpdate()&lt;/strong&gt; 가 호출된다.&lt;br /&gt;
&lt;strong&gt;componentDidUpdate()&lt;/strong&gt;는 유용하게 사용 가능한 &lt;strong&gt;props&lt;/strong&gt; 들을 제공해주는데,&lt;br /&gt;
&lt;strong&gt;prevProps, prevState, snapshot&lt;/strong&gt; 을 제공해준다.&lt;br /&gt;
전 상태를 비교할 수 있다는 것!
개인적으로는 이것을 제공해주는게 너무 감사하다..&lt;/p&gt;
</description>
            <pubDate>Thu, 19 Nov 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//reactjs/2020/11/19/sixth-post.html</link>
            <guid isPermaLink="true">http://localhost:8000//reactjs/2020/11/19/sixth-post.html</guid>
            
            
            <category>reactJS</category>
            
        </item>
        
        <item>
            <title>(ReactJS) 컴포넌트 생명주기</title>
            <description>&lt;p&gt;블로그까지 만들면서 제대로 공부를 시작하기로 했고, 그 일련의 작업들로 기초부터 다지고 있다.
그래서, ReactJS 를 공부를 시작했는데 그 시작에 앞서 ReactJS 에서 가장 많이 사용되는 거로 알고 있는 &lt;strong&gt;Component&lt;/strong&gt;의 생명주기에 대해서 알아보자.&lt;/p&gt;

&lt;p&gt;핵심은 &lt;strong&gt;render()&lt;/strong&gt; 함수 인데, 이 함수가 &lt;em&gt;가상돔에 HTML 코드를 써준다&lt;/em&gt; 라고 생각하면 된다. &amp;lt;- &lt;em&gt;ReactJS 의 개념? 이라고 이해했다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;render()&lt;/strong&gt; 를 기준으로 전/후로 나뉘고, 간략하게 표현하자면 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount -&amp;gt; render -&amp;gt; mounted&lt;/code&gt; 와 같다. &lt;em&gt;(unmount 는 제외하고.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;이를 함수로 자세히보자면 마운트되면서 &lt;strong&gt;constructor()&lt;/strong&gt; 가  &lt;strong&gt;render()&lt;/strong&gt; 되기전에 실행되며, &lt;strong&gt;render()&lt;/strong&gt; 되고 나면 &lt;strong&gt;componentDidMount()&lt;/strong&gt;가 실행된다.
글자 그대로 &lt;strong&gt;마운트 되고 나서~&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;가장 기초적인 것들을 알아보았고, 이후에는 &lt;strong&gt;Updating&lt;/strong&gt; 과 관련된 이야기를 풀어보면서, &lt;strong&gt;State&lt;/strong&gt;에 대해서도 알아보도록 하자.&lt;/p&gt;
</description>
            <pubDate>Wed, 18 Nov 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//reactjs/2020/11/18/fifth-post.html</link>
            <guid isPermaLink="true">http://localhost:8000//reactjs/2020/11/18/fifth-post.html</guid>
            
            
            <category>reactJS</category>
            
        </item>
        
        <item>
            <title>(Database) Null 에 대한 고찰</title>
            <description>&lt;p&gt;개발/코딩을 하면서 변수 초기화를 일반적으로 null 로 진행을 하는 것이 습관이 되었다.&lt;br /&gt;
Null Check 를 통해서 로직을 짜는 것이 가독성도 좋고, 문맥 파악도 용이하기 때문이다.&lt;br /&gt;
그러다 보니 습관적으로 데이터베이스도 기본값을 null 로 설정하거나 들어오지 않은 값에 대해서도 null 로 하는 경우가 있는데,&lt;br /&gt;
개인적으로 그런 습관은 나쁘다고 생각이 든다.&lt;/p&gt;

&lt;p&gt;데이터베이스에서 null 은 내가 생각하기엔 여러가지 의미를 내포하고 있다고 본다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 값이 들어오지 않았다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;2. 값이 없다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;3. 로직상 오류가 존재한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를 들어, 통계를 내거나 데이터 분석을 하려고 하는데 유저의 취미가 null 이라고 보자.&lt;br /&gt;
이 데이터는 어떻게 해석을 해야할까 ?&lt;br /&gt;
취미가 없는걸까 ? 아니면 오류 인가 ? 세팅을 하지 않을 걸까 ?&lt;br /&gt;
이렇게 많은 식으로 해석이 될 수 있는 것은 딱 보기에도 좋아보이지 않는다.&lt;/p&gt;

&lt;p&gt;또한, Null 연산에 대해서도 문제가 있다. 1+Null &amp;gt; Null, Null * 1 &amp;gt; Null, Null + Null &amp;gt; Null 로 취급이 된다.&lt;br /&gt;
이 때문에 연산시에 의도치 않은 잘못된 데이터를 뽑아 낼 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 최종적으로는 DBMS 마다 다르게 취급하는 것이 문제다.&lt;/p&gt;

&lt;p&gt;이렇기 때문에 Null 사용은 나는 가급적 지양하고, 빈 값같은 경우를 사용해야 하는 경우에는&lt;br /&gt;
그 의미를 그대로 가질 수 없는 열은 다른 열과 조합으로 의미를 가지게 하는 것이 좋은 것 같다.&lt;/p&gt;
</description>
            <pubDate>Fri, 13 Nov 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//database/2020/11/13/fourth-post.html</link>
            <guid isPermaLink="true">http://localhost:8000//database/2020/11/13/fourth-post.html</guid>
            
            
            <category>database</category>
            
        </item>
        
        <item>
            <title>(NestJS) ValidationPipe()</title>
            <description>&lt;p&gt;NestJS 에서는 AutoValidation 기능을 해주는 사랑스러운 아이가 있다..!&lt;br /&gt;
&lt;em&gt;@nestjs/common&lt;/em&gt; 에 있는 &lt;em&gt;&lt;a href=&quot;https://docs.nestjs.com/techniques/validation&quot;&gt;ValidationPipe&lt;/a&gt;&lt;/em&gt; 라는 아이.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useGlobalPipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;whitelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;forbidNonWhitelisted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 사용하는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;useGlobalPipes&lt;/code&gt; 는 전역적으로 검사를 시키겠다는 의미로 받아들이면 된다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ValidationPipe&lt;/code&gt; 에서 주로 사용하는 옵션은 위와 같은데 하나 씩 살짝 맛보자면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;whitelist&lt;/strong&gt;: DTO 의 검증을 해준다, 예를 들어 DTO 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;이라는 속성이 String 이어야 한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;@IsString()&lt;/code&gt; 과 함께 쓰여 실제로 들어온것이 스트링인지 확인해주고, 아니라면 오류를 뱉어내준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;forbidNonWhitelisted&lt;/strong&gt;: DTO 에 없는 것을 알려준다, 의도된 공격을 막을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;transform&lt;/strong&gt;: 이 아이가 난 좋은데, 예를 들어 Get 요청시에 들어오는 값들은 모두 스트링이 되는데 id 와 같은 것의 경우에는 Number 형의 경우가 많다. 이럴 때 숫자로만 이루어진 경우에는 자동으로 변환해주는 등 타입에 맞게 알아서 변환해준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;skipMissingProperties&lt;/strong&gt;: 권장하진 않지만, 유효성검 사를 모두 패스하고 싶을때 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/validationPipe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 자동으로 유효성검사해주고 알아서 에러를 뱉어내주니 얼마나 감사한가…&lt;br /&gt;
&lt;del&gt;사랑해&lt;/del&gt;&lt;/p&gt;
</description>
            <pubDate>Tue, 10 Nov 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//nestjs/2020/11/10/third-post.html</link>
            <guid isPermaLink="true">http://localhost:8000//nestjs/2020/11/10/third-post.html</guid>
            
            
            <category>nestJS</category>
            
        </item>
        
        <item>
            <title>(JavaScript) parseInt 의 약어</title>
            <description>&lt;p&gt;parseInt 의 약어가 존재한다는 것을 알아내게 되는 일이 있었다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt(1)&lt;/code&gt; 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;+'1'&lt;/code&gt; 과 동일하다는 것이다.&lt;br /&gt;
이 이유에 대해서는 자세히 알지는 못해서 이래저래 알아보고 동료직원과 고민도 해봤는데,&lt;br /&gt;
뚜렷한 근거에 대해서는 알지 못했다.&lt;/p&gt;

&lt;p&gt;이 글을 보고 &lt;em&gt;으잉?&lt;/em&gt; 하는 사람들도 있을 것 같아서 아래 사진을 첨부해본다.&lt;br /&gt;
&lt;del&gt;나만 몰랐던 거 아니라고 해주세요&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/parseInt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;+1&lt;/code&gt; 표현을 처음 봐서, 익숙치 않아서 그럴진 몰라도 가독성이 그리 좋아보이진 않아서&lt;br /&gt;
실무나 프로젝트에 쓸 것 같지는 않다…&lt;/p&gt;

&lt;p&gt;혹시 이에 대해서 이유/원인을 알고 있는 천사같은 분이 있으시다면,&lt;br /&gt;
댓글로 친절히 알려주시면 &lt;del&gt;사랑해요&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;(추가)&lt;/p&gt;

&lt;p&gt;브라우저별로 속도가 다르다는 제보와 일부 연산 값이 다르다는 제보를 받았다.&lt;br /&gt;
어려운 웹개발의 세계..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://phrogz.net/js/string_to_number.html&quot;&gt;브라우저 속도&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17106681/parseint-vs-unary-plus-when-to-use-which/17106702#17106702&quot;&gt;결과 값&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Mon, 09 Nov 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//javascript/2020/11/09/second-post.html</link>
            <guid isPermaLink="true">http://localhost:8000//javascript/2020/11/09/second-post.html</guid>
            
            
            <category>javascript</category>
            
        </item>
        
        <item>
            <title>GitHub Blog 만들기</title>
            <description>&lt;p&gt;내 가치를 알리기 위한 수단 중 기술 블로그를 &lt;strong&gt;GitHub Blog&lt;/strong&gt; 로 활용하기로 했다.&lt;br /&gt;
많은 레퍼런스들이 있지만, 내가 직접 찾아보고 해본 것들로 남겨두려고 한다.&lt;/p&gt;

&lt;p&gt;기본적으로 &lt;a href=&quot;http://jekyllrb-ko.github.io/&quot;&gt;Jekyll&lt;/a&gt; 을 사용하며 자세하게 알고 싶으면 링크를 타고 들어가서 보면 된다.&lt;br /&gt;
테마는 &lt;del&gt;눈 건강에 좋은&lt;/del&gt; &lt;a href=&quot;http://jekyllthemes.org/themes/hacker-blog/&quot;&gt;해커&lt;/a&gt; 로 결정&lt;/p&gt;

&lt;p&gt;위에서 다운로드 받은 파일을 github 에 올리고 꾸미기만 하면 되는 간단한 작업인데,&lt;br /&gt;
github 에 올리기 위해서는 저장소가 필요하다.&lt;br /&gt;
저장소 생성을 할때 저장소명을 &lt;code class=&quot;highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt; 로 하고 거기에 다운로드 받은 파일을 main 혹은 master 브랜치에 커밋만 해주면 끝!&lt;br /&gt;
커밋 후 반영까지는 1~2분의 시간이 걸리므로 참고하자.&lt;/p&gt;
</description>
            <pubDate>Sun, 08 Nov 2020 00:00:00 +0900</pubDate>
            <link>http://localhost:8000//blog/2020/11/08/first-post.html</link>
            <guid isPermaLink="true">http://localhost:8000//blog/2020/11/08/first-post.html</guid>
            
            
            <category>blog</category>
            
        </item>
        
    </channel>
</rss>
