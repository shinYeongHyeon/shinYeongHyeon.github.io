<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:8000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:8000/" rel="alternate" type="text/html" /><updated>2020-11-21T00:57:10+09:00</updated><id>http://localhost:8000/feed.xml</id><title type="html">Den</title><subtitle>By. Shin YeongHyeon</subtitle><entry><title type="html">(ReactJS) 컴포넌트 생명주기 2</title><link href="http://localhost:8000/reactjs/2020/11/19/sixth-post.html" rel="alternate" type="text/html" title="(ReactJS) 컴포넌트 생명주기 2" /><published>2020-11-19T00:00:00+09:00</published><updated>2020-11-19T00:00:00+09:00</updated><id>http://localhost:8000/reactjs/2020/11/19/sixth-post</id><content type="html" xml:base="http://localhost:8000/reactjs/2020/11/19/sixth-post.html">&lt;p&gt;이전 포스팅에서 ReactJS 의 Class Component 를 살펴보면서 가장 기초적인 부분들을 확인해 보았다.&lt;br /&gt;
이번에는 &lt;strong&gt;Updating&lt;/strong&gt;과 &lt;strong&gt;State&lt;/strong&gt; 에 대해 알아보도록 하자.&lt;/p&gt;

&lt;p&gt;ReactJS 에서는 &lt;strong&gt;State&lt;/strong&gt; 라는 것을 가지고 있는데, 이 아이는 유동적인 데이터를 사용할 때 써먹는다.&lt;br /&gt;
기본적으로&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 사용을 하는데, 이는 private 처럼 사용해야한다, 직접 조작해서는 안되는 뜻!&lt;br /&gt;
변경이 필요할 때는 마치 다른 클래스의 setter 를 사용하듯 &lt;strong&gt;setState&lt;/strong&gt; 메소드를 활용해주어야 한다.&lt;br /&gt;
그 이유는 &lt;strong&gt;Updating&lt;/strong&gt;과 관련이 있는데, state 가 변경될때마다 ReactJS는 렌더링을 다시 하는데,&lt;br /&gt;
&lt;strong&gt;setState&lt;/strong&gt; 메소드를 사용하지 않는다면 이 부분을 감지 못하므로 re-렌더링이 이뤄지지 않는다.&lt;/p&gt;

&lt;p&gt;그래서 위 설명에서 말했 듯, &lt;strong&gt;Updating&lt;/strong&gt;은 &lt;strong&gt;State&lt;/strong&gt; 혹은 &lt;strong&gt;props&lt;/strong&gt;가 변화할때 이뤄진다.&lt;br /&gt;
이때 기타 메소드들이 호출 된 후 (&lt;a href=&quot;https://ko.reactjs.org/docs/react-component.html&quot;&gt;자세한 것은 이리로&lt;/a&gt;)&lt;br /&gt;
&lt;strong&gt;render()&lt;/strong&gt; 과 호출되고 &lt;strong&gt;componentDidUpdate()&lt;/strong&gt; 가 호출된다.&lt;br /&gt;
&lt;strong&gt;componentDidUpdate()&lt;/strong&gt;는 유용하게 사용 가능한 &lt;strong&gt;props&lt;/strong&gt; 들을 제공해주는데,&lt;br /&gt;
&lt;strong&gt;prevProps, prevState, snapshot&lt;/strong&gt; 을 제공해준다.&lt;br /&gt;
전 상태를 비교할 수 있다는 것!
개인적으로는 이것을 제공해주는게 너무 감사하다..&lt;/p&gt;</content><author><name></name></author><summary type="html">React JS 컴포넌트 생명주기 2</summary></entry><entry><title type="html">(ReactJS) 컴포넌트 생명주기</title><link href="http://localhost:8000/reactjs/2020/11/18/fifth-post.html" rel="alternate" type="text/html" title="(ReactJS) 컴포넌트 생명주기" /><published>2020-11-18T00:00:00+09:00</published><updated>2020-11-18T00:00:00+09:00</updated><id>http://localhost:8000/reactjs/2020/11/18/fifth-post</id><content type="html" xml:base="http://localhost:8000/reactjs/2020/11/18/fifth-post.html">&lt;p&gt;블로그까지 만들면서 제대로 공부를 시작하기로 했고, 그 일련의 작업들로 기초부터 다지고 있다.
그래서, ReactJS 를 공부를 시작했는데 그 시작에 앞서 ReactJS 에서 가장 많이 사용되는 거로 알고 있는 &lt;strong&gt;Component&lt;/strong&gt;의 생명주기에 대해서 알아보자.&lt;/p&gt;

&lt;p&gt;핵심은 &lt;strong&gt;render()&lt;/strong&gt; 함수 인데, 이 함수가 &lt;em&gt;가상돔에 HTML 코드를 써준다&lt;/em&gt; 라고 생각하면 된다. &amp;lt;- &lt;em&gt;ReactJS 의 개념? 이라고 이해했다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;render()&lt;/strong&gt; 를 기준으로 전/후로 나뉘고, 간략하게 표현하자면 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount -&amp;gt; render -&amp;gt; mounted&lt;/code&gt; 와 같다. &lt;em&gt;(unmount 는 제외하고.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;이를 함수로 자세히보자면 마운트되면서 &lt;strong&gt;constructor()&lt;/strong&gt; 가  &lt;strong&gt;render()&lt;/strong&gt; 되기전에 실행되며, &lt;strong&gt;render()&lt;/strong&gt; 되고 나면 &lt;strong&gt;componentDidMount()&lt;/strong&gt;가 실행된다.
글자 그대로 &lt;strong&gt;마운트 되고 나서~&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;가장 기초적인 것들을 알아보았고, 이후에는 &lt;strong&gt;Updating&lt;/strong&gt; 과 관련된 이야기를 풀어보면서, &lt;strong&gt;State&lt;/strong&gt;에 대해서도 알아보도록 하자.&lt;/p&gt;</content><author><name></name></author><summary type="html">ReactJS 컴포넌트 생명주기</summary></entry><entry><title type="html">(Database) Null 에 대한 고찰</title><link href="http://localhost:8000/database/2020/11/13/fourth-post.html" rel="alternate" type="text/html" title="(Database) Null 에 대한 고찰" /><published>2020-11-13T00:00:00+09:00</published><updated>2020-11-13T00:00:00+09:00</updated><id>http://localhost:8000/database/2020/11/13/fourth-post</id><content type="html" xml:base="http://localhost:8000/database/2020/11/13/fourth-post.html">&lt;p&gt;개발/코딩을 하면서 변수 초기화를 일반적으로 null 로 진행을 하는 것이 습관이 되었다.&lt;br /&gt;
Null Check 를 통해서 로직을 짜는 것이 가독성도 좋고, 문맥 파악도 용이하기 때문이다.&lt;br /&gt;
그러다 보니 습관적으로 데이터베이스도 기본값을 null 로 설정하거나 들어오지 않은 값에 대해서도 null 로 하는 경우가 있는데,&lt;br /&gt;
개인적으로 그런 습관은 나쁘다고 생각이 든다.&lt;/p&gt;

&lt;p&gt;데이터베이스에서 null 은 내가 생각하기엔 여러가지 의미를 내포하고 있다고 본다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 값이 들어오지 않았다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;2. 값이 없다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;3. 로직상 오류가 존재한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를 들어, 통계를 내거나 데이터 분석을 하려고 하는데 유저의 취미가 null 이라고 보자.&lt;br /&gt;
이 데이터는 어떻게 해석을 해야할까 ?&lt;br /&gt;
취미가 없는걸까 ? 아니면 오류 인가 ? 세팅을 하지 않을 걸까 ?&lt;br /&gt;
이렇게 많은 식으로 해석이 될 수 있는 것은 딱 보기에도 좋아보이지 않는다.&lt;/p&gt;

&lt;p&gt;또한, Null 연산에 대해서도 문제가 있다. 1+Null &amp;gt; Null, Null * 1 &amp;gt; Null, Null + Null &amp;gt; Null 로 취급이 된다.&lt;br /&gt;
이 때문에 연산시에 의도치 않은 잘못된 데이터를 뽑아 낼 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 최종적으로는 DBMS 마다 다르게 취급하는 것이 문제다.&lt;/p&gt;

&lt;p&gt;이렇기 때문에 Null 사용은 나는 가급적 지양하고, 빈 값같은 경우를 사용해야 하는 경우에는&lt;br /&gt;
그 의미를 그대로 가질 수 없는 열은 다른 열과 조합으로 의미를 가지게 하는 것이 좋은 것 같다.&lt;/p&gt;</content><author><name></name></author><summary type="html">Null 에 대한 고찰</summary></entry><entry><title type="html">(NestJS) ValidationPipe()</title><link href="http://localhost:8000/nestjs/2020/11/10/third-post.html" rel="alternate" type="text/html" title="(NestJS) ValidationPipe()" /><published>2020-11-10T00:00:00+09:00</published><updated>2020-11-10T00:00:00+09:00</updated><id>http://localhost:8000/nestjs/2020/11/10/third-post</id><content type="html" xml:base="http://localhost:8000/nestjs/2020/11/10/third-post.html">&lt;p&gt;NestJS 에서는 AutoValidation 기능을 해주는 사랑스러운 아이가 있다..!&lt;br /&gt;
&lt;em&gt;@nestjs/common&lt;/em&gt; 에 있는 &lt;em&gt;&lt;a href=&quot;https://docs.nestjs.com/techniques/validation&quot;&gt;ValidationPipe&lt;/a&gt;&lt;/em&gt; 라는 아이.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useGlobalPipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;whitelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;forbidNonWhitelisted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 사용하는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;useGlobalPipes&lt;/code&gt; 는 전역적으로 검사를 시키겠다는 의미로 받아들이면 된다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ValidationPipe&lt;/code&gt; 에서 주로 사용하는 옵션은 위와 같은데 하나 씩 살짝 맛보자면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;whitelist&lt;/strong&gt;: DTO 의 검증을 해준다, 예를 들어 DTO 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;이라는 속성이 String 이어야 한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;@IsString()&lt;/code&gt; 과 함께 쓰여 실제로 들어온것이 스트링인지 확인해주고, 아니라면 오류를 뱉어내준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;forbidNonWhitelisted&lt;/strong&gt;: DTO 에 없는 것을 알려준다, 의도된 공격을 막을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;transform&lt;/strong&gt;: 이 아이가 난 좋은데, 예를 들어 Get 요청시에 들어오는 값들은 모두 스트링이 되는데 id 와 같은 것의 경우에는 Number 형의 경우가 많다. 이럴 때 숫자로만 이루어진 경우에는 자동으로 변환해주는 등 타입에 맞게 알아서 변환해준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;skipMissingProperties&lt;/strong&gt;: 권장하진 않지만, 유효성검 사를 모두 패스하고 싶을때 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/validationPipe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 자동으로 유효성검사해주고 알아서 에러를 뱉어내주니 얼마나 감사한가…&lt;br /&gt;
&lt;del&gt;사랑해&lt;/del&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">ValidationPipe</summary></entry><entry><title type="html">(JavaScript) parseInt 의 약어</title><link href="http://localhost:8000/javascript/2020/11/09/second-post.html" rel="alternate" type="text/html" title="(JavaScript) parseInt 의 약어" /><published>2020-11-09T00:00:00+09:00</published><updated>2020-11-09T00:00:00+09:00</updated><id>http://localhost:8000/javascript/2020/11/09/second-post</id><content type="html" xml:base="http://localhost:8000/javascript/2020/11/09/second-post.html">&lt;p&gt;parseInt 의 약어가 존재한다는 것을 알아내게 되는 일이 있었다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt(1)&lt;/code&gt; 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;+'1'&lt;/code&gt; 과 동일하다는 것이다.&lt;br /&gt;
이 이유에 대해서는 자세히 알지는 못해서 이래저래 알아보고 동료직원과 고민도 해봤는데,&lt;br /&gt;
뚜렷한 근거에 대해서는 알지 못했다.&lt;/p&gt;

&lt;p&gt;이 글을 보고 &lt;em&gt;으잉?&lt;/em&gt; 하는 사람들도 있을 것 같아서 아래 사진을 첨부해본다.&lt;br /&gt;
&lt;del&gt;나만 몰랐던 거 아니라고 해주세요&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/parseInt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;+1&lt;/code&gt; 표현을 처음 봐서, 익숙치 않아서 그럴진 몰라도 가독성이 그리 좋아보이진 않아서&lt;br /&gt;
실무나 프로젝트에 쓸 것 같지는 않다…&lt;/p&gt;

&lt;p&gt;혹시 이에 대해서 이유/원인을 알고 있는 천사같은 분이 있으시다면,&lt;br /&gt;
댓글로 친절히 알려주시면 &lt;del&gt;사랑해요&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;(추가)&lt;/p&gt;

&lt;p&gt;브라우저별로 속도가 다르다는 제보와 일부 연산 값이 다르다는 제보를 받았다.&lt;br /&gt;
어려운 웹개발의 세계..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://phrogz.net/js/string_to_number.html&quot;&gt;브라우저 속도&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17106681/parseint-vs-unary-plus-when-to-use-which/17106702#17106702&quot;&gt;결과 값&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">parseInt(1) === +1</summary></entry><entry><title type="html">GitHub Blog 만들기</title><link href="http://localhost:8000/blog/2020/11/08/first-post.html" rel="alternate" type="text/html" title="GitHub Blog 만들기" /><published>2020-11-08T00:00:00+09:00</published><updated>2020-11-08T00:00:00+09:00</updated><id>http://localhost:8000/blog/2020/11/08/first-post</id><content type="html" xml:base="http://localhost:8000/blog/2020/11/08/first-post.html">&lt;p&gt;내 가치를 알리기 위한 수단 중 기술 블로그를 &lt;strong&gt;GitHub Blog&lt;/strong&gt; 로 활용하기로 했다.&lt;br /&gt;
많은 레퍼런스들이 있지만, 내가 직접 찾아보고 해본 것들로 남겨두려고 한다.&lt;/p&gt;

&lt;p&gt;기본적으로 &lt;a href=&quot;http://jekyllrb-ko.github.io/&quot;&gt;Jekyll&lt;/a&gt; 을 사용하며 자세하게 알고 싶으면 링크를 타고 들어가서 보면 된다.&lt;br /&gt;
테마는 &lt;del&gt;눈 건강에 좋은&lt;/del&gt; &lt;a href=&quot;http://jekyllthemes.org/themes/hacker-blog/&quot;&gt;해커&lt;/a&gt; 로 결정&lt;/p&gt;

&lt;p&gt;위에서 다운로드 받은 파일을 github 에 올리고 꾸미기만 하면 되는 간단한 작업인데,&lt;br /&gt;
github 에 올리기 위해서는 저장소가 필요하다.&lt;br /&gt;
저장소 생성을 할때 저장소명을 &lt;code class=&quot;highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt; 로 하고 거기에 다운로드 받은 파일을 main 혹은 master 브랜치에 커밋만 해주면 끝!&lt;br /&gt;
커밋 후 반영까지는 1~2분의 시간이 걸리므로 참고하자.&lt;/p&gt;</content><author><name></name></author><summary type="html">내 가치를 알리기 위한 수단 중 기술 블로그를 GitHub Blog 로 활용하기로 했다.</summary></entry></feed>