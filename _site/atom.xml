<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Den Shin's Blog</title>
    <description>Den's Blog</description>
    <link>http://localhost:8000</link>
    <atom:link href="http://localhost:8000/feed.xml" rel="self" type="application/rss+xml" />
    <author>
      <name>Shin Yeong Hyeon</name>
      <email>den.shin.dev@gmail.com</email>
      <uri></uri>
    </author>
    
      <item>
        <title>(NestJS) ValidationPipe()</title>
        <description>&lt;p&gt;NestJS 에서는 AutoValidation 기능을 해주는 사랑스러운 아이가 있다..!&lt;br /&gt;
&lt;em&gt;@nestjs/common&lt;/em&gt; 에 있는 &lt;em&gt;&lt;a href=&quot;https://docs.nestjs.com/techniques/validation&quot;&gt;ValidationPipe&lt;/a&gt;&lt;/em&gt; 라는 아이.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useGlobalPipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;whitelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;forbidNonWhitelisted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 사용하는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useGlobalPipes&lt;/code&gt; 는 전역적으로 검사를 시키겠다는 의미로 받아들이면 된다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ValidationPipe&lt;/code&gt; 에서 주로 사용하는 옵션은 위와 같은데 하나 씩 살짝 맛보자면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;whitelist&lt;/strong&gt;: DTO 의 검증을 해준다, 예를 들어 DTO 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;이라는 속성이 String 이어야 한다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@IsString()&lt;/code&gt; 과 함께 쓰여 실제로 들어온것이 스트링인지 확인해주고, 아니라면 오류를 뱉어내준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;forbidNonWhitelisted&lt;/strong&gt;: DTO 에 없는 것을 알려준다, 의도된 공격을 막을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;transform&lt;/strong&gt;: 이 아이가 난 좋은데, 예를 들어 Get 요청시에 들어오는 값들은 모두 스트링이 되는데 id 와 같은 것의 경우에는 Number 형의 경우가 많다. 이럴 때 숫자로만 이루어진 경우에는 자동으로 변환해주는 등 타입에 맞게 알아서 변환해준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;skipMissingProperties&lt;/strong&gt;: 권장하진 않지만, 유효성검 사를 모두 패스하고 싶을때 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../assets/validationPipe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 자동으로 유효성검사해주고 알아서 에러를 뱉어내주니 얼마나 감사한가…&lt;br /&gt;
&lt;del&gt;사랑해&lt;/del&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:8000//third-post</link>
        <link href="http://localhost:8000/third-post"/>
        <guid isPermaLink="true">http://localhost:8000/third-post</guid>
      </item>
    
      <item>
        <title>(JavaScript) parseInt 의 약어</title>
        <description>&lt;p&gt;parseInt 의 약어가 존재한다는 것을 알아내게 되는 일이 있었다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseInt(1)&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+'1'&lt;/code&gt; 과 동일하다는 것이다.&lt;br /&gt;
이 이유에 대해서는 자세히 알지는 못해서 이래저래 알아보고 동료직원과 고민도 해봤는데,&lt;br /&gt;
뚜렷한 근거에 대해서는 알지 못했다.&lt;/p&gt;

&lt;p&gt;이 글을 보고 &lt;em&gt;으잉?&lt;/em&gt; 하는 사람들도 있을 것 같아서 아래 사진을 첨부해본다.&lt;br /&gt;
&lt;del&gt;나만 몰랐던 거 아니라고 해주세요&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/parseInt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+1&lt;/code&gt; 표현을 처음 봐서, 익숙치 않아서 그럴진 몰라도 가독성이 그리 좋아보이진 않아서&lt;br /&gt;
실무나 프로젝트에 쓸 것 같지는 않다…&lt;/p&gt;

&lt;p&gt;혹시 이에 대해서 이유/원인을 알고 있는 천사같은 분이 있으시다면,&lt;br /&gt;
댓글로 친절히 알려주시면 &lt;del&gt;사랑해요&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;(추가)&lt;/p&gt;

&lt;p&gt;브라우저별로 속도가 다르다는 제보와 일부 연산 값이 다르다는 제보를 받았다.&lt;br /&gt;
어려운 웹개발의 세계..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://phrogz.net/js/string_to_number.html&quot;&gt;브라우저 속도&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17106681/parseint-vs-unary-plus-when-to-use-which/17106702#17106702&quot;&gt;결과 값&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:8000//second-post</link>
        <link href="http://localhost:8000/second-post"/>
        <guid isPermaLink="true">http://localhost:8000/second-post</guid>
      </item>
    
      <item>
        <title>GitHub Blog 만들기</title>
        <description>&lt;p&gt;내 가치를 알리기 위한 수단 중 기술 블로그를 &lt;strong&gt;GitHub Blog&lt;/strong&gt; 로 활용하기로 했다.&lt;br /&gt;
많은 레퍼런스들이 있지만, 내가 직접 찾아보고 해본 것들로 남겨두려고 한다.&lt;/p&gt;

&lt;p&gt;기본적으로 &lt;a href=&quot;http://jekyllrb-ko.github.io/&quot;&gt;Jekyll&lt;/a&gt; 을 사용하며 자세하게 알고 싶으면 링크를 타고 들어가서 보면 된다.&lt;br /&gt;
테마는 &lt;del&gt;눈 건강에 좋은&lt;/del&gt; &lt;a href=&quot;http://jekyllthemes.org/themes/hacker-blog/&quot;&gt;해커&lt;/a&gt; 로 결정&lt;/p&gt;

&lt;p&gt;위에서 다운로드 받은 파일을 github 에 올리고 꾸미기만 하면 되는 간단한 작업인데,&lt;br /&gt;
github 에 올리기 위해서는 저장소가 필요하다.&lt;br /&gt;
저장소 생성을 할때 저장소명을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt; 로 하고 거기에 다운로드 받은 파일을 main 혹은 master 브랜치에 커밋만 해주면 끝!&lt;br /&gt;
커밋 후 반영까지는 1~2분의 시간이 걸리므로 참고하자.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:8000//first-post</link>
        <link href="http://localhost:8000/first-post"/>
        <guid isPermaLink="true">http://localhost:8000/first-post</guid>
      </item>
    
  </channel>
</rss>
